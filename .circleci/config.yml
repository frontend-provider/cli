version: '2.1'

orbs:
  # https://circleci.com/developer/orbs/orb/circleci/windows
  win: circleci/windows@2.4.1
  # https://circleci.com/developer/orbs/orb/circleci/aws-cli
  aws-cli: circleci/aws-cli@2.0.3
  # https://circleci.com/developer/orbs/orb/circleci/github-cli
  gh: circleci/github-cli@2.1.0
  # https://circleci.com/developer/orbs/orb/circleci/go
  go: circleci/go@1.7.1

parameters:
  node_version:
    type: string
    # https://circleci.com/developer/images/image/cimg/node
    default: '16.14.2'
  npm_version:
    type: string
    # match whatever's bundled with node_version
    default: '8.1.2'
  aws_version:
    type: string
    # https://github.com/aws/aws-cli/blob/v2/CHANGELOG.rst
    default: '2.4.12'
  gh_version:
    type: string
    # https://github.com/cli/cli/releases
    default: '2.7.0'
  go_version:
    type: string
    # https://go.dev/doc/devel/release
    default: '1.17.8'
  mitmproxy_version:
    type: string
    # https://go.dev/doc/devel/release
    default: '7.0.4'

executors:
  docker-node:
    parameters:
      node_version:
        type: string
        default: << pipeline.parameters.node_version >>
    docker:
      - image: cimg/node:<< parameters.node_version >>
    # Using RAM Disk. https://circleci.com/docs/2.0/executor-types/#ram-disks
    working_directory: /mnt/ramdisk/snyk
  linux:
    machine:
      # https://circleci.com/developer/machine/image/ubuntu-2004
      image: ubuntu-2004:202201-01
  linux-arm64:
    machine:
      # https://circleci.com/docs/2.0/arm-resources/
      image: ubuntu-2004:202101-01
    resource_class: arm.medium
  macos:
    macos:
      # https://circleci.com/docs/2.0/testing-ios/#supported-xcode-versions
      xcode: '13.3.0'

commands:
  setup_npm:
    parameters:
      node_version:
        type: string
        default: << pipeline.parameters.node_version >>
      npm_version:
        type: string
        default: << pipeline.parameters.npm_version >>
      npm_cache_directory:
        type: string
        default: /mnt/ramdisk/.npm
      npm_global_sudo:
        type: boolean
        default: true
      npm_install:
        type: boolean
        default: false
    steps:
      - restore_cache:
          name: Restoring npm cache
          keys:
            - npm-cache-v2-{{ arch }}-node<< parameters.node_version >>-npm<< parameters.npm_version >>-{{ checksum "package-lock.json" }}
      - when:
          condition:
            not: << parameters.npm_global_sudo >>
          steps:
            run:
              name: Installing npm
              command: npm install -g npm@<< parameters.npm_version >>
      - when:
          condition: << parameters.npm_global_sudo >>
          steps:
            run:
              name: Installing npm
              command: sudo npm install -g npm@<< parameters.npm_version >>
      - run:
          name: Configuring npm
          command: |
            npm config set '//registry.npmjs.org/:_authToken' '${NPM_TOKEN}'
            npm config set cache << parameters.npm_cache_directory >>
            npm config set prefer-offline true
      - when:
          condition: << parameters.npm_install >>
          steps:
            - run:
                name: Installing project dependencies
                command: npm ci
            - save_cache:
                name: Saving npm cache
                key: npm-cache-v2-{{ arch }}-node<< parameters.node_version >>-npm<< parameters.npm_version >>-{{ checksum "package-lock.json" }}
                paths:
                  - << parameters.npm_cache_directory >>
  install_sdks_windows:
    steps:
      - run:
          name: Removing pre-installed NodeJS
          command: |
            $current_node_version = node --version
            nvm uninstall $current_node_version
      - restore_cache:
          name: Restoring Chocolatey cache
          keys:
            - chocolatey-cache-v2-{{ arch }}-{{ checksum ".circleci/chocolatey.config" }}
      - run:
          name: Installing SDKs
          command: choco install .circleci/chocolatey.config --no-progress
      - save_cache:
          name: Saving Chocolatey cache
          key: chocolatey-cache-v2-{{ arch }}-{{ checksum ".circleci/chocolatey.config" }}
          paths:
            - ~\AppData\Local\Temp\chocolatey
  install_sdks_unix:
    steps:
      - restore_cache:
          name: Restoring SDKMAN install cache
          keys:
            - sdkman-install-cache-v3-{{ arch }}-{{ checksum ".circleci/vendor/sdkman-install.sh" }}
      - run:
          name: Installing SDKMAN
          # The install script comes from https://get.sdkman.io/?rcupdate=false
          # We need to disable rcupdate as CircleCI uses a different setup.
          command: |
            ./.circleci/vendor/sdkman-install.sh
            echo -e '\nsource "${HOME}/.sdkman/bin/sdkman-init.sh"' >> $BASH_ENV
            source $BASH_ENV
      - save_cache:
          name: Saving SDKMAN install cache
          key: sdkman-install-cache-v3-{{ arch }}-{{ checksum ".circleci/vendor/sdkman-install.sh" }}
          paths:
            - ~/.sdkman
      - restore_cache:
          name: Restoring SDKMAN archive cache
          keys:
            - sdkman-archive-cache-v3-{{ arch }}-{{ checksum ".circleci/install-sdks-unix.sh" }}
      - run:
          name: Installing SDKs
          command: ./.circleci/install-sdks-unix.sh
      - save_cache:
          name: Saving SDKMAN archive cache
          key: sdkman-archive-cache-v3-{{ arch }}-{{ checksum ".circleci/install-sdks-unix.sh" }}
          paths:
            - ~/.sdkman/archives
      - aws-cli/install:
          version: << pipeline.parameters.aws_version >>
  install_sdks_linux:
    steps:
      - run:
          name: Installing Python
          command: |
            sudo apt update
            sudo apt install python3 python3-pip python-is-python3
      - install_sdks_unix
  install_sdks_macos:
    steps:
      - install_sdks_unix
  install_shellspec_dependencies:
    steps:
      - run:
          name: Installing ShellSpec
          command: |
            curl -fsSL https://git.io/shellspec | sh -s -- -y
            sudo ln -s ${HOME}/.local/lib/shellspec/shellspec /usr/local/bin/shellspec
  start_proxy_linux:
    steps:
      - run:
          name: Create and import proxy certificate
          working_directory: ./cliv2
          command: |
            go run cmd/make-cert/main.go test-corp-proxy
            sudo cp test-corp-proxy.crt /usr/local/share/ca-certificates
            sudo update-ca-certificates
      - restore_cache:
          name: Restoring mitmproxy install cache
          key: mitmproxy-install-cache-{{ arch }}-<< pipeline.parameters.mitmproxy_version >>
      - run:
          name: Install mitmproxy
          command: |
            if ! test -f mitmproxy.tar.gz; then
              curl -Lo mitmproxy.tar.gz https://snapshots.mitmproxy.org/<< pipeline.parameters.mitmproxy_version >>/mitmproxy-<< pipeline.parameters.mitmproxy_version >>-linux.tar.gz
            fi
            sudo tar -xvzf mitmproxy.tar.gz -C /usr/local/bin
      - save_cache:
          name: Saving mitmproxy install cache
          key: mitmproxy-install-cache-{{ arch }}-<< pipeline.parameters.mitmproxy_version >>
          paths:
            - mitmproxy.tar.gz
      - run:
          name: Start proxy
          background: true
          working_directory: ./cliv2
          command: mitmdump --certs *=test-corp-proxy.pem
      - run:
          name: Wait for proxy
          working_directory: ./cliv2
          command: |
            curl -I --verbose --retry 6 --retry-delay 5 --retry-connrefused http://localhost:8080
            curl -I --verbose --proxy http://localhost:8080 "${SNYK_API}"
  start_proxy_windows:
    steps:
      - run:
          name: Create and import proxy certificate
          working_directory: ./cliv2
          command: |
            go run cmd/make-cert/main.go test-corp-proxy
            Import-Certificate -FilePath test-corp-proxy.crt -CertStoreLocation Cert:\LocalMachine\Root
      - run:
          name: Start proxy
          background: true
          working_directory: ./cliv2
          command: mitmdump --certs *=test-corp-proxy.pem
      - run:
          name: Wait for proxy
          shell: bash.exe
          working_directory: ./cliv2
          command: |
            curl -I --verbose --retry 6 --retry-delay 5 --retry-connrefused http://localhost:8080
            curl -I --verbose --proxy http://localhost:8080 "${SNYK_API}"

jobs:
  install:
    executor: docker-node
    steps:
      - checkout
      - setup_npm:
          npm_install: true
      - persist_to_workspace:
          root: .
          paths:
            - node_modules
            - packages/*/node_modules
  lint:
    executor: docker-node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup_npm
      - run:
          name: Linting project
          command: npm run lint
  build:
    executor: docker-node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup_npm
      - run:
          name: Building project
          command: npm run build:prod
      - persist_to_workspace:
          root: .
          paths:
            - dist/
            - packages/*/dist
            - pysrc
  regression-test:
    parameters:
      test_snyk_command:
        type: string
    executor: docker-node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - install_sdks_linux
      - install_shellspec_dependencies
      - setup_npm
      - run:
          name: Installing test fixture dependencies
          working_directory: ./test/fixtures/basic-npm
          command: npm install
      - run:
          name: Installing Snyk CLI
          command: |
            sudo ln -s << parameters.test_snyk_command >> /usr/local/bin/snyk
            snyk --version
      - run:
          name: Running ShellSpec tests
          working_directory: ./test/smoke
          command: |
            echo "Checkout the README in test/smoke folder for more details about this step"
            unset SNYK_API
            unset SNYK_API_KEY
            shellspec -f d -e REGRESSION_TEST=1
  test-windows:
    parameters:
      test_snyk_command:
        type: string
    executor: win/default
    working_directory: C:\Users\circleci\snyk
    steps:
      - run:
          name: Configuring Git
          command: git config --global core.autocrlf false
      - checkout
      - attach_workspace:
          at: .
      - install_sdks_windows
      - setup_npm:
          npm_global_sudo: false
          npm_install: true # reinstalling as workspace node_modules is for linux
          npm_cache_directory: ~\AppData\Local\npm-cache
      - run:
          name: Configuring artifact
          command: << parameters.test_snyk_command >> config set "api=$env:SNYK_API_KEY"
      - run:
          name: Testing artifact
          command: npm run test:acceptance -- --selectProjects snyk
          environment:
            TEST_SNYK_COMMAND: << parameters.test_snyk_command >>
  test-macos:
    parameters:
      test_snyk_command:
        type: string
    executor: macos
    working_directory: /Users/distiller/snyk
    steps:
      - checkout
      - attach_workspace:
          at: .
      - install_sdks_macos
      - setup_npm:
          npm_global_sudo: false
          npm_install: true # reinstalling as workspace node_modules is for linux
          npm_cache_directory: /Users/distiller/.npm
      - run:
          name: Configuring artifact
          command: << parameters.test_snyk_command >> config set "api=${SNYK_API_KEY}"
      - run:
          name: Testing artifact
          command: npm run test:acceptance -- --selectProjects snyk
          environment:
            TEST_SNYK_COMMAND: << parameters.test_snyk_command >>
  test-linux:
    parameters:
      test_snyk_command:
        type: string
    executor: linux
    working_directory: /home/circleci/snyk
    steps:
      - checkout
      - attach_workspace:
          at: .
      - install_sdks_linux
      - run:
          name: Installing Node.js
          command: |
            sudo apt update
            sudo apt install nodejs npm
      - setup_npm:
          npm_cache_directory: /home/circleci/.npm
      - run:
          name: Configuring artifact
          command: << parameters.test_snyk_command >> config set "api=${SNYK_API_KEY}"
      - run:
          name: Testing artifact
          command: npm run test:acceptance -- --selectProjects snyk
          environment:
            TEST_SNYK_COMMAND: << parameters.test_snyk_command >>
  test-linux-arm64:
    executor: linux-arm64
    working_directory: /home/circleci/snyk
    steps:
      - checkout
      - attach_workspace:
          at: .
      - install_sdks_linux
      - run:
          name: Installing Node.js
          command: |
            sudo apt update
            sudo apt install nodejs npm
      - setup_npm:
          npm_cache_directory: /home/circleci/.npm
      - run:
          name: Configuring artifact
          command: /home/circleci/snyk/binary-releases/snyk-linux-arm64 config set "api=${SNYK_API_KEY}"
      - run:
          name: Testing artifact
          command: npm run test:acceptance
          environment:
            TEST_SNYK_COMMAND: /home/circleci/snyk/binary-releases/snyk-linux-arm64
  test-jest:
    parameters:
      node_version:
        type: string
    executor:
      name: docker-node
      node_version: << parameters.node_version >>
    environment:
      TEMP: /mnt/ramdisk/tmp
    steps:
      - run:
          name: Creating temporary directory
          command: mkdir /mnt/ramdisk/tmp
      - checkout
      - attach_workspace:
          at: .
      - install_sdks_linux
      - setup_npm:
          node_version: << parameters.node_version >>
      - run:
          name: Configuring Snyk CLI
          command: node ./bin/snyk config set "api=${SNYK_API_KEY}"
      - run:
          name: Running unit tests
          command: npm run test:unit
      - run:
          name: Running acceptance tests
          command: npm run test:acceptance

  test-tap:
    executor: docker-node
    parallelism: 2
    steps:
      - checkout
      - attach_workspace:
          at: .
      - install_sdks_linux
      - setup_npm
      - run:
          name: Configuring Snyk CLI
          command: node ./bin/snyk config set "api=${SNYK_API_KEY}"
      - run:
          name: Running Tap tests
          command: |
            npx tap -Rspec --timeout=300 --node-arg=-r --node-arg=ts-node/register \
              $(circleci tests glob "test/tap/*.test.*" | circleci tests split)

  build-artifacts:
    executor: docker-node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup_npm
      - run:
          name: Installing build dependencies
          command: |
            sudo apt update
            sudo apt install osslsigncode
      - run:
          name: Preparing packages
          command: ./release-scripts/prepare-packages-for-release.sh
      - run:
          name: Building artifacts
          command: ./release-scripts/make-binaries.sh
      - store_artifacts:
          path: ./binary-releases
      - run:
          name: Validating artifacts
          command: ./release-scripts/validate-checksums.sh
      - persist_to_workspace:
          root: .
          paths:
            - binary-releases
  release:
    executor: docker-node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup_npm
      - run:
          name: Validating artifacts
          command: ./release-scripts/validate-checksums.sh
      - gh/setup:
          token: GH_TOKEN
          version: << pipeline.parameters.gh_version >>
      - aws-cli/install:
          version: << pipeline.parameters.aws_version >>
      - run:
          name: Ensure master branch
          command: |
            if [ "$CIRCLE_BRANCH" != "master" ]; then
              echo "Release must be on 'master' branch."
              exit 1
            fi
      - run:
          name: Ensure not already released
          command: |
            if git describe --contains --tags; then
              echo "This commit has already been released."
              exit 1
            fi
      - run:
          name: Publishing npm packages
          command: |
            npm publish ./binary-releases/snyk-fix.tgz
            npm publish ./binary-releases/snyk-protect.tgz
            npm publish ./binary-releases/snyk.tgz
      - run:
          name: Publishing artifacts
          command: ./release-scripts/upload-artifacts.sh
      - run:
          name: Handling failed release
          command: ./release-scripts/handle-failed-release.sh
          when: on_fail

  #
  # Snyk CLI v2 Jobs
  #
  v2-build-artifacts:
    executor: linux
    working_directory: /home/circleci/snyk
    steps:
      - checkout
      - go/install:
          version: << pipeline.parameters.go_version >>
      - restore_cache:
          key: go-mod-{{ arch }}-{{ checksum "cliv2/go.sum" }}
      - run:
          name: Build linux/amd64
          working_directory: ./cliv2
          environment:
            GOOS: linux
            GOARCH: amd64
          command: make build build-test install prefix=. -e
      - run:
          name: Build darwin/amd64
          working_directory: ./cliv2
          environment:
            GOOS: darwin
            GOARCH: amd64
          command: make build build-test install prefix=. -e
      - run:
          name: Build windows/amd64
          working_directory: ./cliv2
          environment:
            GOOS: windows
            GOARCH: amd64
          command: make build build-test install prefix=. -e
      - save_cache:
          key: go-mod-{{ arch }}-{{ checksum "cliv2/go.sum" }}
          paths:
            - /home/circleci/go/pkg/mod
      - store_artifacts:
          path: ./cliv2/bin
      - persist_to_workspace:
          root: .
          paths:
            - ./cliv2/bin

  v2-test-linux-amd64:
    executor: linux
    working_directory: /home/circleci/snyk
    steps:
      - checkout
      - attach_workspace:
          at: .
      - go/install:
          version: << pipeline.parameters.go_version >>
      - run:
          name: Run integration tests
          working_directory: ./cliv2
          environment:
            TEST_SNYK_EXECUTABLE_PATH: ./bin/snyk_linux_amd64
          command: |
            export SNYK_TOKEN="${SNYK_API_KEY}"
            ./bin/snyk_tests_linux_amd64
  v2-test-proxy-linux-amd64:
    executor: linux
    working_directory: /home/circleci/snyk
    steps:
      - checkout
      - attach_workspace:
          at: .
      - go/install:
          version: << pipeline.parameters.go_version >>
      - start_proxy_linux
      - run:
          name: Run integration tests
          working_directory: ./cliv2
          environment:
            TEST_SNYK_EXECUTABLE_PATH: ./bin/snyk_linux_amd64
            HTTPS_PROXY: http://localhost:8080
          command: |
            export SNYK_TOKEN="${SNYK_API_KEY}"
            ./bin/snyk_tests_linux_amd64

  v2-test-darwin-amd64:
    executor: macos
    working_directory: /Users/distiller/snyk
    steps:
      - checkout
      - attach_workspace:
          at: .
      - go/install:
          version: << pipeline.parameters.go_version >>
      - run:
          name: Run integration tests
          working_directory: ./cliv2
          environment:
            TEST_SNYK_EXECUTABLE_PATH: ./bin/snyk_darwin_amd64
          command: |
            export SNYK_TOKEN="${SNYK_API_KEY}"
            ./bin/snyk_tests_darwin_amd64

  v2-test-windows-amd64:
    executor: win/default
    working_directory: C:\Users\circleci\snyk
    steps:
      - checkout
      - attach_workspace:
          at: .
      - install_sdks_windows
      - run:
          name: Run integration tests
          working_directory: ./cliv2
          environment:
            TEST_SNYK_EXECUTABLE_PATH: ./bin/snyk_windows_amd64.exe
          command: |
            $env:SNYK_TOKEN = $env:SNYK_API_KEY
            ./bin/snyk_tests_windows_amd64.exe
  v2-test-proxy-windows-amd64:
    executor: win/default
    working_directory: C:\Users\circleci\snyk
    steps:
      - checkout
      - attach_workspace:
          at: .
      - install_sdks_windows
      - start_proxy_windows
      - run:
          name: Run integration tests
          working_directory: ./cliv2
          environment:
            TEST_SNYK_EXECUTABLE_PATH: ./bin/snyk_windows_amd64.exe
            HTTPS_PROXY: http://localhost:8080
          command: |
            $env:SNYK_TOKEN = $env:SNYK_API_KEY
            ./bin/snyk_tests_windows_amd64.exe

workflows:
  version: 2
  test_and_release:
    jobs:
      - install:
          name: Install
      - lint:
          name: Lint
          requires:
            - Install
      - build:
          name: Build
          requires:
            - Install
      - test-jest:
          name: Jest Tests (Linux, Node v<< matrix.node_version >>)
          context: nodejs-install
          requires:
            - Build
          matrix:
            parameters:
              node_version: ['12.22.11', '14.19.1', '16.14.2']
      - test-tap:
          name: Tap Tests
          context: nodejs-install
          requires:
            - Build
      - build-artifacts:
          name: Build Artifacts
          requires:
            - Build
          filters:
            branches:
              only:
                - /^chore\/.+$/
                - /^test\/.+$/
                - /test-all/
                - master
      - test-windows:
          name: Acceptance Tests (snyk-win.exe)
          context: nodejs-install
          requires:
            - Build Artifacts
          test_snyk_command: C:\Users\circleci\snyk\binary-releases\snyk-win.exe
      - test-macos:
          name: Acceptance Tests (snyk-macos)
          context: nodejs-install
          requires:
            - Build Artifacts
          test_snyk_command: /Users/distiller/snyk/binary-releases/snyk-macos
      - test-linux:
          name: Acceptance Tests (snyk-linux)
          context: nodejs-install
          requires:
            - Build Artifacts
          test_snyk_command: /home/circleci/snyk/binary-releases/snyk-linux
      - test-linux-arm64:
          name: Acceptance Tests (snyk-linux-arm64)
          context: nodejs-install
          requires:
            - Build Artifacts
      - regression-test:
          name: Regression Tests
          context: nodejs-install
          requires:
            - Build Artifacts
          test_snyk_command: /mnt/ramdisk/snyk/binary-releases/snyk-linux
      - should-release:
          name: Release?
          type: approval
          requires:
            - Lint
            - Tap Tests
            - Jest Tests (Linux, Node v12.22.11)
            - Jest Tests (Linux, Node v14.19.1)
            - Jest Tests (Linux, Node v16.14.2)
            - Acceptance Tests (snyk-win.exe)
            - Acceptance Tests (snyk-macos)
            - Acceptance Tests (snyk-linux)
            - Acceptance Tests (snyk-linux-arm64)
            - Regression Tests
          filters:
            branches:
              only:
                - master
      - release:
          name: Release
          context: nodejs-app-release
          requires:
            - Release?
          filters:
            branches:
              only:
                - master
  #
  # Snyk CLI v2 Workflows
  #
  v2_test:
    # Only run on v2 branches
    when:
      matches:
        pattern: '^.*v2.*$'
        value: << pipeline.git.branch >>
    jobs:
      - install:
          name: Install Dependencies (npm)
      - v2-build-artifacts:
          name: Build Artifacts (v2)
      - v2-test-linux-amd64:
          name: Integration Tests (linux/amd64)
          requires:
            - Build Artifacts (v2)
      - v2-test-proxy-linux-amd64:
          name: Proxy Integration Tests (linux/amd64)
          requires:
            - Build Artifacts (v2)
      - v2-test-darwin-amd64:
          name: Integration Tests (darwin/amd64)
          requires:
            - Build Artifacts (v2)
      - v2-test-windows-amd64:
          name: Integration Tests (windows/amd64)
          requires:
            - Build Artifacts (v2)
      - v2-test-proxy-windows-amd64:
          name: Proxy Integration Tests (windows/amd64)
          requires:
            - Build Artifacts (v2)
      # Tests for backwards compatibility with CLIv1
      - test-linux:
          name: Jest Acceptance Tests (linux/amd64)
          context: nodejs-install
          requires:
            - Build Artifacts (v2)
            - Install Dependencies (npm)
          test_snyk_command: /home/circleci/snyk/cliv2/bin/snyk_linux_amd64
      - test-windows:
          name: Jest Acceptance Tests (windows/amd64)
          context: nodejs-install
          requires:
            - Build Artifacts (v2)
            - Install Dependencies (npm)
          test_snyk_command: C:\Users\circleci\snyk\cliv2\bin\snyk_windows_amd64.exe
      - test-macos:
          name: Jest Acceptance Tests (darwin/amd64)
          context: nodejs-install
          requires:
            - Build Artifacts (v2)
            - Install Dependencies (npm)
          test_snyk_command: /Users/distiller/snyk/cliv2/bin/snyk_darwin_amd64
      - regression-test:
          name: Regression Tests (v2)
          context: nodejs-install
          requires:
            - Build Artifacts (v2)
          test_snyk_command: /mnt/ramdisk/snyk/cliv2/bin/snyk_linux_amd64
