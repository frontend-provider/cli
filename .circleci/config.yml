version: 2.1

orbs:
  win: circleci/windows@2.4.1
  aws-cli: circleci/aws-cli@2.0.3
  gh: circleci/github-cli@1.0.4

defaults: &defaults
  parameters:
    node_version:
      type: string
      default: '16.13.2'
    npm_version:
      type: string
      default: '8.1.2'
    aws_version:
      type: string
      default: '2.4.12'
  working_directory: /mnt/ramdisk/snyk

commands:
  setup_npm:
    parameters:
      node_version:
        type: string
      npm_version:
        type: string
      npm_cache_directory:
        type: string
        default: /mnt/ramdisk/.npm
      npm_global_sudo:
        type: boolean
        default: true
      npm_install:
        type: boolean
        default: false
    steps:
      - restore_cache:
          name: Restoring npm cache
          keys:
            - npm-cache-v2-{{ arch }}-node<< parameters.node_version >>-npm<< parameters.npm_version >>-{{ checksum "package-lock.json" }}
      - when:
          condition:
            not: << parameters.npm_global_sudo >>
          steps:
            run:
              name: Installing npm
              command: npm install -g npm@<< parameters.npm_version >>
      - when:
          condition: << parameters.npm_global_sudo >>
          steps:
            run:
              name: Installing npm
              command: sudo npm install -g npm@<< parameters.npm_version >>
      - run:
          name: Configuring npm
          command: |
            npm config set '//registry.npmjs.org/:_authToken' '${NPM_TOKEN}'
            npm config set cache << parameters.npm_cache_directory >>
            npm config set prefer-offline true
      - when:
          condition: << parameters.npm_install >>
          steps:
            - run:
                name: Installing project dependencies
                command: npm ci
            - save_cache:
                name: Saving npm cache
                key: npm-cache-v2-{{ arch }}-node<< parameters.node_version >>-npm<< parameters.npm_version >>-{{ checksum "package-lock.json" }}
                paths:
                  - << parameters.npm_cache_directory >>
  install_sdks_windows:
    steps:
      - run:
          name: Removing pre-installed NodeJS
          command: |
            $current_node_version = node --version
            nvm uninstall $current_node_version
      - restore_cache:
          name: Restoring Chocolatey cache
          keys:
            - chocolatey-cache-v2-{{ arch }}-{{ checksum ".circleci/chocolatey.config" }}
      - run:
          name: Installing SDKs
          command: choco install .circleci/chocolatey.config --no-progress
      - save_cache:
          name: Saving Chocolatey cache
          key: chocolatey-cache-v2-{{ arch }}-{{ checksum ".circleci/chocolatey.config" }}
          paths:
            - ~\AppData\Local\Temp\chocolatey
  install_sdks_linux:
    steps:
      - restore_cache:
          name: Restoring SDKMAN install cache
          keys:
            - sdkman-install-cache-v3-{{ arch }}-{{ checksum ".circleci/vendor/sdkman-install.sh" }}
      - run:
          name: Installing Python
          command: |
            sudo apt update
            sudo apt install python3 python3-pip python-is-python3
      - run:
          name: Installing SDKMAN
          # The install script comes from https://get.sdkman.io/?rcupdate=false
          # We need to disable rcupdate as CircleCI uses a different setup.
          command: |
            ./.circleci/vendor/sdkman-install.sh
            echo -e '\nsource "/home/circleci/.sdkman/bin/sdkman-init.sh"' >> $BASH_ENV
            source $BASH_ENV
      - save_cache:
          name: Saving SDKMAN install cache
          key: sdkman-install-cache-v3-{{ arch }}-{{ checksum ".circleci/vendor/sdkman-install.sh" }}
          paths:
            - ~/.sdkman
      - restore_cache:
          name: Restoring SDKMAN archive cache
          keys:
            - sdkman-archive-cache-v3-{{ arch }}-{{ checksum ".circleci/install-sdks-linux.sh" }}
      - run:
          name: Installing SDKs
          command: ./.circleci/install-sdks-linux.sh
      - save_cache:
          name: Saving SDKMAN archive cache
          key: sdkman-archive-cache-v3-{{ arch }}-{{ checksum ".circleci/install-sdks-linux.sh" }}
          paths:
            - ~/.sdkman/archives
  install_shellspec_dependencies:
    steps:
      - run:
          name: Installing ShellSpec
          command: |
            curl -fsSL https://git.io/shellspec | sh -s -- -y
            sudo ln -s ${HOME}/.local/lib/shellspec/shellspec /usr/local/bin/shellspec
  pack_snyk_cli:
    steps:
      - run:
          name: Packing Snyk CLI
          command: |
            mkdir ./dist-pack
            cd ./dist-pack
            npm pack ..
  install_release_dependencies:
    steps:
      - run:
          name: Installing release dependencies
          command: |
            sudo apt update
            sudo apt install osslsigncode
jobs:
  install:
    <<: *defaults
    docker:
      - image: cimg/node:<< parameters.node_version >>
    steps:
      - checkout
      - setup_npm:
          node_version: << parameters.node_version >>
          npm_version: << parameters.npm_version >>
          npm_install: true
      - persist_to_workspace:
          root: .
          paths:
            - node_modules
            - packages/*/node_modules
  lint:
    <<: *defaults
    docker:
      - image: cimg/node:<< parameters.node_version >>
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup_npm:
          node_version: << parameters.node_version >>
          npm_version: << parameters.npm_version >>
      - run:
          name: Linting project
          command: npm run lint
  build:
    <<: *defaults
    docker:
      - image: cimg/node:<< parameters.node_version >>
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup_npm:
          node_version: << parameters.node_version >>
          npm_version: << parameters.npm_version >>
      - run:
          name: Building project
          command: npm run build:prod
      - persist_to_workspace:
          root: .
          paths:
            - dist/
            - packages/*/dist
            - pysrc
  regression-test:
    <<: *defaults
    docker:
      - image: cimg/node:<< parameters.node_version >>
    steps:
      - checkout
      - attach_workspace:
          at: .
      - install_sdks_linux
      - install_shellspec_dependencies
      - setup_npm:
          node_version: << parameters.node_version >>
          npm_version: << parameters.npm_version >>
      - run:
          name: Installing test fixture dependencies
          working_directory: ./test/fixtures/basic-npm
          command: npm install
      - run:
          name: Pruning dependencies
          command: npx ts-node ./release-scripts/prune-dependencies-in-packagejson.ts
      - pack_snyk_cli
      - run:
          name: Installing packed Snyk CLI
          command: sudo npm install -g snyk-*.tgz
          path: ./dist-pack
      - run:
          name: Running ShellSpec tests
          working_directory: ./test/smoke
          command: |
            echo "Checkout the README in test/smoke folder for more details about this step"
            unset SNYK_API
            unset SNYK_API_KEY
            shellspec -f d -e REGRESSION_TEST=1
  test-windows:
    <<: *defaults
    executor: win/default
    working_directory: ~\snyk
    steps:
      - run:
          name: Configuring Git
          command: git config --global core.autocrlf false
      - checkout
      - attach_workspace:
          at: .
      - install_sdks_windows
      - setup_npm:
          node_version: << parameters.node_version >>
          npm_version: << parameters.npm_version >>
          npm_global_sudo: false
          npm_install: true # reinstalling as workspace node_modules is for linux
          npm_cache_directory: ~\AppData\Local\npm-cache
      - run:
          name: Configuring Snyk CLI
          command: node ./bin/snyk config set "api=$env:SNYK_API_KEY"
      - run:
          name: Running acceptance tests
          command: npm run test:acceptance
  test-linux:
    <<: *defaults
    docker:
      - image: cimg/node:<< parameters.node_version >>
    environment:
      TEMP: /mnt/ramdisk/tmp
    steps:
      - run:
          name: Creating temporary directory
          command: mkdir /mnt/ramdisk/tmp
      - checkout
      - attach_workspace:
          at: .
      - install_sdks_linux
      - setup_npm:
          node_version: << parameters.node_version >>
          npm_version: << parameters.npm_version >>
      - run:
          name: Configuring Snyk CLI
          command: node ./bin/snyk config set "api=${SNYK_API_KEY}"
      - run:
          name: Running unit tests
          command: npm run test:unit
      - aws-cli/install:
          version: << parameters.aws_version >>
      - run:
          name: Running acceptance tests
          command: npm run test:acceptance

  test-tap:
    <<: *defaults
    docker:
      - image: cimg/node:<< parameters.node_version >>
    parallelism: 2
    steps:
      - checkout
      - attach_workspace:
          at: .
      - install_sdks_linux
      - setup_npm:
          node_version: << parameters.node_version >>
          npm_version: << parameters.npm_version >>
      - run:
          name: Configuring Snyk CLI
          command: node ./bin/snyk config set "api=${SNYK_API_KEY}"
      - run:
          name: Running Tap tests
          command: |
            npx tap -Rspec --timeout=300 --node-arg=-r --node-arg=ts-node/register \
              $(circleci tests glob "test/tap/*.test.*" | circleci tests split)

  dev-release:
    <<: *defaults
    docker:
      - image: cimg/node:<< parameters.node_version >>
    steps:
      - checkout
      - attach_workspace:
          at: .
      - install_release_dependencies
      - setup_npm:
          node_version: << parameters.node_version >>
          npm_version: << parameters.npm_version >>
      - run:
          name: Updating package versions
          command: ./release-scripts/update-dev-versions.sh
      - run:
          name: Pruning Snyk CLI dependencies
          command: npx ts-node ./release-scripts/prune-dependencies-in-packagejson.ts
      - run:
          name: Building binaries
          command: |
            cat package.json
            ./release-scripts/make-binaries.sh
            ls -la ./binary-releases
      - store_artifacts:
          path: ./binary-releases
      - run:
          name: Validating binaries
          working_directory: ./binary-releases
          command: ../release-scripts/validate-checksums.sh
      - pack_snyk_cli
      - store_artifacts:
          path: ./dist-pack
  prod-release:
    <<: *defaults
    docker:
      - image: cimg/node:<< parameters.node_version >>
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Should I release?
          command: ./release-scripts/should-i-release.sh
      - gh/setup:
          token: GH_TOKEN
          version: 1.9.2
      - aws-cli/install:
          version: << parameters.aws_version >>
      - install_release_dependencies
      - setup_npm:
          node_version: << parameters.node_version >>
          npm_version: << parameters.npm_version >>
      - run:
          name: Updating package versions
          command: |
            ./release-scripts/update-versions.sh
            git update-index --skip-worktree -- ./lerna.json
            git update-index --skip-worktree -- ./package.json
            git update-index --skip-worktree -- ./packages/snyk-protect/package.json
      - run:
          name: Pruning Snyk CLI dependencies
          command: npx ts-node ./release-scripts/prune-dependencies-in-packagejson.ts
      - run:
          name: Bumping versions and publishing packages
          command: npx lerna publish minor --yes --no-push --no-git-tag-version --exact
      - run:
          name: Building binaries
          command: |
            ./release-scripts/make-binaries.sh
            ls -la ./binary-releases
      - store_artifacts:
          path: ./binary-releases
      - run:
          name: Validating binaries
          working_directory: ./binary-releases
          command: ../release-scripts/validate-checksums.sh
      - run:
          name: Generating release notes
          command: npx conventional-changelog-cli -p angular -l -r 1 > RELEASE_NOTES.txt
      - run:
          name: Publishing binaries
          command: ./release-scripts/upload-artifacts.sh
      - run:
          name: Handling failed release
          command: ./release-scripts/handle-failed-release.sh
          when: on_fail

workflows:
  version: 2
  test_and_release:
    jobs:
      - install:
          name: Install
      - lint:
          name: Lint
          requires:
            - Install
      - build:
          name: Build
          requires:
            - Install
      - regression-test:
          name: Regression Tests
          context: nodejs-install
          requires:
            - Build
          filters:
            branches:
              ignore:
                - master
      - test-windows:
          name: Jest Tests (Windows)
          context: nodejs-install
          requires:
            - Build
          filters:
            branches:
              ignore:
                - master
      - test-linux:
          name: Jest Tests (Linux, Node v<< matrix.node_version >>)
          context: nodejs-install
          requires:
            - Build
          filters:
            branches:
              ignore:
                - master
          matrix:
            parameters:
              node_version: ['10.24.1', '12.22.9', '14.18.2', '16.13.2']
      - test-tap:
          name: Tap Tests
          context: nodejs-install
          requires:
            - Build
          filters:
            branches:
              ignore:
                - master
      - dev-release:
          name: Development Release
          requires:
            - Lint
            - Build
          filters:
            branches:
              ignore:
                - master
      - prod-release:
          name: Production Release
          context: nodejs-app-release
          requires:
            - Lint
            - Build
          filters:
            branches:
              only:
                - master
