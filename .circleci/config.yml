version: '2.1'

orbs:
  # https://circleci.com/developer/orbs/orb/circleci/windows
  win: circleci/windows@2.4.1
  # https://circleci.com/developer/orbs/orb/circleci/aws-cli
  aws-cli: circleci/aws-cli@2.0.3
  # https://circleci.com/developer/orbs/orb/circleci/github-cli
  gh: circleci/github-cli@1.0.4

parameters:
  node_version:
    type: string
    # https://circleci.com/developer/images/image/cimg/node
    default: '16.13.2'
  npm_version:
    type: string
    # match whatever's bundled with node_version
    default: '8.1.2'
  aws_version:
    type: string
    # https://github.com/aws/aws-cli/blob/v2/CHANGELOG.rst
    default: '2.4.12'
  gh_version:
    type: string
    # https://github.com/cli/cli/releases
    default: '1.9.2'

executors:
  linux:
    parameters:
      node_version:
        type: string
        default: << pipeline.parameters.node_version >>
    docker:
      - image: cimg/node:<< parameters.node_version >>
    # Using RAM Disk. https://circleci.com/docs/2.0/executor-types/#ram-disks
    working_directory: /mnt/ramdisk/snyk

commands:
  setup_npm:
    parameters:
      node_version:
        type: string
        default: << pipeline.parameters.node_version >>
      npm_version:
        type: string
        default: << pipeline.parameters.npm_version >>
      npm_cache_directory:
        type: string
        default: /mnt/ramdisk/.npm
      npm_global_sudo:
        type: boolean
        default: true
      npm_install:
        type: boolean
        default: false
    steps:
      - restore_cache:
          name: Restoring npm cache
          keys:
            - npm-cache-v2-{{ arch }}-node<< parameters.node_version >>-npm<< parameters.npm_version >>-{{ checksum "package-lock.json" }}
      - when:
          condition:
            not: << parameters.npm_global_sudo >>
          steps:
            run:
              name: Installing npm
              command: npm install -g npm@<< parameters.npm_version >>
      - when:
          condition: << parameters.npm_global_sudo >>
          steps:
            run:
              name: Installing npm
              command: sudo npm install -g npm@<< parameters.npm_version >>
      - run:
          name: Configuring npm
          command: |
            npm config set '//registry.npmjs.org/:_authToken' '${NPM_TOKEN}'
            npm config set cache << parameters.npm_cache_directory >>
            npm config set prefer-offline true
      - when:
          condition: << parameters.npm_install >>
          steps:
            - run:
                name: Installing project dependencies
                command: npm ci
            - save_cache:
                name: Saving npm cache
                key: npm-cache-v2-{{ arch }}-node<< parameters.node_version >>-npm<< parameters.npm_version >>-{{ checksum "package-lock.json" }}
                paths:
                  - << parameters.npm_cache_directory >>
  install_sdks_windows:
    steps:
      - run:
          name: Removing pre-installed NodeJS
          command: |
            $current_node_version = node --version
            nvm uninstall $current_node_version
      - restore_cache:
          name: Restoring Chocolatey cache
          keys:
            - chocolatey-cache-v2-{{ arch }}-{{ checksum ".circleci/chocolatey.config" }}
      - run:
          name: Installing SDKs
          command: choco install .circleci/chocolatey.config --no-progress
      - save_cache:
          name: Saving Chocolatey cache
          key: chocolatey-cache-v2-{{ arch }}-{{ checksum ".circleci/chocolatey.config" }}
          paths:
            - ~\AppData\Local\Temp\chocolatey
  install_sdks_linux:
    steps:
      - restore_cache:
          name: Restoring SDKMAN install cache
          keys:
            - sdkman-install-cache-v3-{{ arch }}-{{ checksum ".circleci/vendor/sdkman-install.sh" }}
      - run:
          name: Installing Python
          command: |
            sudo apt update
            sudo apt install python3 python3-pip python-is-python3
      - run:
          name: Installing SDKMAN
          # The install script comes from https://get.sdkman.io/?rcupdate=false
          # We need to disable rcupdate as CircleCI uses a different setup.
          command: |
            ./.circleci/vendor/sdkman-install.sh
            echo -e '\nsource "/home/circleci/.sdkman/bin/sdkman-init.sh"' >> $BASH_ENV
            source $BASH_ENV
      - save_cache:
          name: Saving SDKMAN install cache
          key: sdkman-install-cache-v3-{{ arch }}-{{ checksum ".circleci/vendor/sdkman-install.sh" }}
          paths:
            - ~/.sdkman
      - restore_cache:
          name: Restoring SDKMAN archive cache
          keys:
            - sdkman-archive-cache-v3-{{ arch }}-{{ checksum ".circleci/install-sdks-linux.sh" }}
      - run:
          name: Installing SDKs
          command: ./.circleci/install-sdks-linux.sh
      - save_cache:
          name: Saving SDKMAN archive cache
          key: sdkman-archive-cache-v3-{{ arch }}-{{ checksum ".circleci/install-sdks-linux.sh" }}
          paths:
            - ~/.sdkman/archives
  install_shellspec_dependencies:
    steps:
      - run:
          name: Installing ShellSpec
          command: |
            curl -fsSL https://git.io/shellspec | sh -s -- -y
            sudo ln -s ${HOME}/.local/lib/shellspec/shellspec /usr/local/bin/shellspec

jobs:
  install:
    executor: linux
    steps:
      - checkout
      - setup_npm:
          npm_install: true
      - persist_to_workspace:
          root: .
          paths:
            - node_modules
            - packages/*/node_modules
  lint:
    executor: linux
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup_npm
      - run:
          name: Linting project
          command: npm run lint
  build:
    executor: linux
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup_npm
      - run:
          name: Building project
          command: npm run build:prod
      - persist_to_workspace:
          root: .
          paths:
            - dist/
            - packages/*/dist
            - pysrc
  regression-test:
    executor: linux
    steps:
      - checkout
      - attach_workspace:
          at: .
      - install_sdks_linux
      - install_shellspec_dependencies
      - setup_npm
      - run:
          name: Installing test fixture dependencies
          working_directory: ./test/fixtures/basic-npm
          command: npm install
      - run:
          name: Pruning dependencies
          command: npx ts-node ./release-scripts/prune-dependencies-in-packagejson.ts
      - run:
          name: Installing packed Snyk CLI
          command: sudo npm install -g ./binary-releases/snyk.tgz
      - run:
          name: Running ShellSpec tests
          working_directory: ./test/smoke
          command: |
            echo "Checkout the README in test/smoke folder for more details about this step"
            unset SNYK_API
            unset SNYK_API_KEY
            shellspec -f d -e REGRESSION_TEST=1
  test-windows:
    executor: win/default
    working_directory: C:\Users\circleci\snyk
    steps:
      - run:
          name: Configuring Git
          command: git config --global core.autocrlf false
      - checkout
      - attach_workspace:
          at: .
      - install_sdks_windows
      - setup_npm:
          npm_global_sudo: false
          npm_install: true # reinstalling as workspace node_modules is for linux
          npm_cache_directory: ~\AppData\Local\npm-cache
      - run:
          name: Configuring artifact
          command: C:\Users\circleci\snyk\binary-releases\snyk-win.exe config set "api=$env:SNYK_API_KEY"
      - run:
          name: Testing artifact
          command: npm run test:acceptance
          environment:
            TEST_SNYK_COMMAND: C:\Users\circleci\snyk\binary-releases\snyk-win.exe
  test-linux:
    parameters:
      node_version:
        type: string
    executor:
      name: linux
      node_version: << parameters.node_version >>
    environment:
      TEMP: /mnt/ramdisk/tmp
    steps:
      - run:
          name: Creating temporary directory
          command: mkdir /mnt/ramdisk/tmp
      - checkout
      - attach_workspace:
          at: .
      - install_sdks_linux
      - setup_npm:
          node_version: << parameters.node_version >>
      - run:
          name: Configuring Snyk CLI
          command: node ./bin/snyk config set "api=${SNYK_API_KEY}"
      - run:
          name: Running unit tests
          command: npm run test:unit
      - aws-cli/install:
          version: << pipeline.parameters.aws_version >>
      - run:
          name: Running acceptance tests
          command: npm run test:acceptance

  test-tap:
    executor: linux
    parallelism: 2
    steps:
      - checkout
      - attach_workspace:
          at: .
      - install_sdks_linux
      - setup_npm
      - run:
          name: Configuring Snyk CLI
          command: node ./bin/snyk config set "api=${SNYK_API_KEY}"
      - run:
          name: Running Tap tests
          command: |
            npx tap -Rspec --timeout=300 --node-arg=-r --node-arg=ts-node/register \
              $(circleci tests glob "test/tap/*.test.*" | circleci tests split)

  build-artifacts:
    executor: linux
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup_npm
      - run:
          name: Installing build dependencies
          command: |
            sudo apt update
            sudo apt install osslsigncode
      - run:
          name: Preparing packages
          command: ./release-scripts/prepare-packages-for-release.sh
      - run:
          name: Building artifacts
          command: ./release-scripts/make-binaries.sh
      - store_artifacts:
          path: ./binary-releases
      - run:
          name: Validating artifacts
          command: ./release-scripts/validate-checksums.sh
      - persist_to_workspace:
          root: .
          paths:
            - binary-releases
  release:
    executor: linux
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup_npm
      - run:
          name: Validating artifacts
          command: ./release-scripts/validate-checksums.sh
      - gh/setup:
          token: GH_TOKEN
          version: << pipeline.parameters.gh_version >>
      - aws-cli/install:
          version: << pipeline.parameters.aws_version >>
      - run:
          name: Ensure master branch
          command: |
            if [ "$CIRCLE_BRANCH" != "master" ]; then
              echo "Release must be on 'master' branch."
              exit 1
            fi
      - run:
          name: Publishing npm packages
          command: |
            npm publish ./binary-releases/snyk-fix.tgz
            npm publish ./binary-releases/snyk-protect.tgz
            npm publish ./binary-releases/snyk.tgz
      - run:
          name: Publishing artifacts
          command: ./release-scripts/upload-artifacts.sh
      - run:
          name: Handling failed release
          command: ./release-scripts/handle-failed-release.sh
          when: on_fail

workflows:
  version: 2
  test_and_release:
    jobs:
      - install:
          name: Install
      - lint:
          name: Lint
          requires:
            - Install
      - build:
          name: Build
          requires:
            - Install
      - test-linux:
          name: Jest Tests (Linux, Node v<< matrix.node_version >>)
          context: nodejs-install
          requires:
            - Build
          matrix:
            parameters:
              node_version: ['10.24.1', '12.22.9', '14.18.2', '16.13.2']
      - test-tap:
          name: Tap Tests
          context: nodejs-install
          requires:
            - Build
      - build-artifacts:
          name: Build Artifacts
          requires:
            - Build
          filters:
            branches:
              only:
                - /^chore\/.+$/
                - master
      - test-windows:
          name: Acceptance Tests (snyk-win.exe)
          context: nodejs-install
          requires:
            - Build Artifacts
      - regression-test:
          name: Regression Tests
          context: nodejs-install
          requires:
            - Build Artifacts
      - should-release:
          name: Release?
          type: approval
          requires:
            - Lint
            - Tap Tests
            - Jest Tests (Linux, Node v10.24.1)
            - Jest Tests (Linux, Node v12.22.9)
            - Jest Tests (Linux, Node v14.18.2)
            - Jest Tests (Linux, Node v16.13.2)
            - Acceptance Tests (snyk-win.exe)
            - Regression Tests
          filters:
            branches:
              only:
                - master
      - release:
          name: Release
          context: nodejs-app-release
          requires:
            - Release?
          filters:
            branches:
              only:
                - master
