version: 2.1

orbs:
  win: circleci/windows@2.4.1
  aws-cli: circleci/aws-cli@2.0.3
  gh: circleci/github-cli@1.0.4

defaults: &defaults
  parameters:
    node_version:
      type: string
      default: '14.17.5'
    root_tap_tests:
      type: boolean
      default: false
    jest_tests:
      type: boolean
      default: false
    acceptance_tests:
      type: boolean
      default: false
    system_tests:
      type: boolean
      default: false
    package_tests:
      type: boolean
      default: false
  working_directory: /mnt/ramdisk/snyk

commands:
  install_project_dependencies:
    parameters:
      node_version:
        type: string
      npm_version:
        type: string
        default: '7.21.1'
      npm_cache_directory:
        type: string
        default: /mnt/ramdisk/.npm
      npm_global_sudo:
        type: boolean
        default: true
    steps:
      - restore_cache:
          name: Restoring npm cache
          keys:
            - npm-cache-v2-{{ arch }}-node<< parameters.node_version >>-npm<< parameters.npm_version >>-{{ checksum "package-lock.json" }}
      - when:
          condition:
            not: << parameters.npm_global_sudo >>
          steps:
            run:
              name: Installing npm
              command: npm install -g npm@<< parameters.npm_version >>
      - when:
          condition: << parameters.npm_global_sudo >>
          steps:
            run:
              name: Installing npm
              command: sudo npm install -g npm@<< parameters.npm_version >>
      - run:
          name: Configuring npm
          command: |
            npm config set '//registry.npmjs.org/:_authToken' '${NPM_TOKEN}'
            npm config set cache << parameters.npm_cache_directory >>
            npm config set prefer-offline true
      - run:
          name: Installing project dependencies
          command: npm ci
      - save_cache:
          name: Saving npm cache
          key: npm-cache-v2-{{ arch }}-node<< parameters.node_version >>-npm<< parameters.npm_version >>-{{ checksum "package-lock.json" }}
          paths:
            - << parameters.npm_cache_directory >>
  build_project:
    steps:
      - run:
          name: Building project
          command: npm run build:prod
      - persist_to_workspace:
          root: .
          paths:
            - dist/
            - packages/*/dist
            - pysrc
  install_sdks_windows:
    steps:
      - restore_cache:
          name: Restoring Chocolatey cache
          keys:
            - chocolatey-cache-v2-{{ arch }}-{{ checksum ".circleci/chocolatey.config" }}
      - run:
          name: Installing SDKs
          command: choco install .circleci/chocolatey.config --no-progress
      - save_cache:
          name: Saving Chocolatey cache
          key: chocolatey-cache-v2-{{ arch }}-{{ checksum ".circleci/chocolatey.config" }}
          paths:
            - ~\AppData\Local\Temp\chocolatey
  install_sdks_linux:
    steps:
      - run:
          name: Installing SDKMAN
          command: |
            curl -s "https://get.sdkman.io?rcupdate=false" | bash
            echo -e '\nsource "/home/circleci/.sdkman/bin/sdkman-init.sh"' >> $BASH_ENV
            source $BASH_ENV
      # - restore_cache:
      #     name: Restoring SDKMAN cache
      #     keys:
      #       - sdkman-cache-v2-{{ arch }}-{{ checksum ".circleci/install-sdks-linux.sh" }}
      - run:
          name: Installing SDKs
          command: ./.circleci/install-sdks-linux.sh
      # - save_cache:
      #     name: Saving SDKMAN cache
      #     key: sdkman-cache-v2-{{ arch }}-{{ checksum ".circleci/install-sdks-linux.sh" }}
      #     paths:
      #       - ~/.sdkman/archives
  install_node_windows:
    parameters:
      node_version:
        type: string
    steps:
      - run:
          name: Removing pre-installed NodeJS
          command: |
            $current_node_version = node --version
            nvm uninstall $current_node_version
      - run:
          name: Installing NodeJS
          command: choco install nodejs --version=<< parameters.node_version >> --no-progress
  install_shellspec_dependencies:
    steps:
      - run:
          name: Installing test dependencies
          command: sudo apt-get install jq python-pip
      - run:
          name: Installing ShellSpec
          command: |
            curl -fsSL https://git.io/shellspec | sh -s -- -y
            sudo ln -s ${HOME}/.local/lib/shellspec/shellspec /usr/local/bin/shellspec
  pack_snyk_cli:
    steps:
      - run:
          name: Packing Snyk CLI
          command: |
            mkdir ./dist-pack
            cd ./dist-pack
            npm pack ..
  install_release_dependencies:
    steps:
      - run:
          name: Installing release dependencies
          command: sudo apt-get install -y osslsigncode

jobs:
  build:
    <<: *defaults
    docker:
      - image: circleci/node:<< parameters.node_version >>
    steps:
      - checkout
      - install_project_dependencies:
          node_version: << parameters.node_version >>
      - run:
          name: Linting project
          command: npm run lint
      - build_project
  regression-test:
    <<: *defaults
    docker:
      - image: circleci/node:<< parameters.node_version >>
    steps:
      - checkout
      - install_sdks_linux
      - install_shellspec_dependencies
      - install_project_dependencies:
          node_version: << parameters.node_version >>
      - attach_workspace:
          at: .
      - run:
          name: Installing test fixture dependencies
          working_directory: ./test/fixtures/basic-npm
          command: npm install
      - run:
          name: Pruning dependencies
          command: npx ts-node ./release-scripts/prune-dependencies-in-packagejson.ts
      - pack_snyk_cli
      - run:
          name: Installing packed Snyk CLI
          command: sudo npm install -g snyk-*.tgz
          path: ./dist-pack
      - run:
          name: Running ShellSpec tests
          working_directory: ./test/smoke
          command: |
            echo "Checkout the README in test/smoke folder for more details about this step"
            unset SNYK_API
            unset SNYK_API_KEY
            shellspec -f d -e REGRESSION_TEST=1
  test-windows:
    <<: *defaults
    executor: win/default
    working_directory: ~\snyk
    steps:
      - run:
          name: Configuring Git
          command: git config --global core.autocrlf false
      - checkout
      - install_node_windows:
          node_version: << parameters.node_version >>
      - install_sdks_windows
      - install_project_dependencies:
          npm_cache_directory: ~\AppData\Local\npm-cache
          node_version: << parameters.node_version >>
          npm_global_sudo: false
      - attach_workspace:
          at: .
      - run:
          name: Configuring Snyk CLI
          command: node ./bin/snyk config set "api=$env:SNYK_API_KEY"
      - when:
          condition: << parameters.package_tests >>
          steps:
            - run:
                name: Running unit tests (Packages)
                command: npm run test:packages-unit -- --ci
      - when:
          condition: << parameters.package_tests >>
          steps:
            - run:
                name: Running acceptance tests (Packages)
                command: npm run test:packages-acceptance -- --ci
      - when:
          condition: << parameters.root_tap_tests >>
          steps:
            - run:
                name: Running root tests (Tap)
                command: npm run test:test
      - when:
          condition: << parameters.jest_tests >>
          steps:
            - run:
                name: Running root tests (Jest)
                command: npm run test:jest -- --ci
            - run:
                name: Running unit tests (Jest)
                command: npm run test:jest-unit -- --ci
            - run:
                name: Running system tests (Jest)
                command: npm run test:jest-system -- --ci
            - run:
                name: Download AWS CLI
                command: |
                  msiexec.exe /i AWSCLIV2.msi /quiet
                  [Environment]::SetEnvironmentVariable("Path", $env:PATH + `
                  ";c:\Program Files\Amazon\AWSCLIV2", "Machine")
                shell: powershell.exe
            - run:
                name: Running acceptance tests (Jest)
                command: npm run test:jest-acceptance -- --ci
      - when:
          condition: << parameters.acceptance_tests >>
          steps:
            - run:
                name: Running acceptance tests (Tap)
                command: npm run test:acceptance
      - when:
          condition: << parameters.system_tests >>
          steps:
            - run:
                name: Running system tests (Tap)
                command: npm run test:system
  test-linux:
    <<: *defaults
    docker:
      - image: circleci/node:<< parameters.node_version >>
    environment:
      TEMP: /mnt/ramdisk/tmp
    steps:
      - run:
          name: Creating temporary directory
          command: mkdir /mnt/ramdisk/tmp
      - checkout
      - install_sdks_linux
      - install_project_dependencies:
          node_version: << parameters.node_version >>
      - attach_workspace:
          at: .
      - run:
          name: Configuring Snyk CLI
          command: node ./bin/snyk config set "api=${SNYK_API_KEY}"
      - when:
          condition: << parameters.package_tests >>
          steps:
            - run:
                name: Running unit tests (Packages)
                command: npm run test:packages-unit -- --ci
      - when:
          condition: << parameters.package_tests >>
          steps:
            - run:
                name: Running acceptance tests (Packages)
                command: npm run test:packages-acceptance -- --ci
      - when:
          condition: << parameters.root_tap_tests >>
          steps:
            - run:
                name: Running root tests (Tap)
                command: npm run test:test
      - when:
          condition: << parameters.jest_tests >>
          steps:
            - run:
                name: Running root tests (Jest)
                command: npm run test:jest -- --ci
            - run:
                name: Running unit tests (Jest)
                command: npm run test:jest-unit -- --ci
            - run:
                name: Running system tests (Jest)
                command: npm run test:jest-system -- --ci
            - aws-cli/install:
                version: 2.2.32
            - run:
                name: Running acceptance tests (Jest)
                command: npm run test:jest-acceptance -- --ci
      - when:
          condition: << parameters.acceptance_tests >>
          steps:
            - run:
                name: Running acceptance tests (Tap)
                command: npm run test:acceptance
      - when:
          condition: << parameters.system_tests >>
          steps:
            - run:
                name: Running system tests (Tap)
                command: npm run test:system
  dev-release:
    <<: *defaults
    docker:
      - image: circleci/node:<< parameters.node_version >>
    steps:
      - checkout
      - install_release_dependencies
      - install_project_dependencies:
          node_version: << parameters.node_version >>
      - attach_workspace:
          at: .
      - run:
          name: Updating package versions
          command: ./release-scripts/update-dev-versions.sh
      - run:
          name: Pruning Snyk CLI dependencies
          command: npx ts-node ./release-scripts/prune-dependencies-in-packagejson.ts
      - run:
          name: Building binaries
          command: |
            cat package.json
            ./release-scripts/make-binaries.sh
            ls -la ./binary-releases
      - store_artifacts:
          path: ./binary-releases
      - run:
          name: Validating binaries
          working_directory: ./binary-releases
          command: ../release-scripts/validate-checksums.sh
      - pack_snyk_cli
      - store_artifacts:
          path: ./dist-pack
  prod-release:
    <<: *defaults
    docker:
      - image: circleci/node:<< parameters.node_version >>
    steps:
      - checkout
      - run:
          name: Should I release?
          command: ./release-scripts/should-i-release.sh
      - gh/setup:
          token: GH_TOKEN
          version: 1.9.2
      - aws-cli/install:
          version: 2.2.32
      - install_release_dependencies
      - install_project_dependencies:
          node_version: << parameters.node_version >>
      - attach_workspace:
          at: .
      - run:
          name: Updating package versions
          command: |
            ./release-scripts/update-versions.sh
            git update-index --skip-worktree -- ./lerna.json
            git update-index --skip-worktree -- ./package.json
            git update-index --skip-worktree -- ./packages/snyk-protect/package.json
      - run:
          name: Pruning Snyk CLI dependencies
          command: npx ts-node ./release-scripts/prune-dependencies-in-packagejson.ts
      - run:
          name: Bumping versions and publishing packages
          command: npx lerna publish minor --yes --no-push --no-git-tag-version --exact
      - run:
          name: Building binaries
          command: |
            ./release-scripts/make-binaries.sh
            ls -la ./binary-releases
      - store_artifacts:
          path: ./binary-releases
      - run:
          name: Validating binaries
          working_directory: ./binary-releases
          command: ../release-scripts/validate-checksums.sh
      - run:
          name: Generating release notes
          command: npx conventional-changelog-cli -p angular -l -r 1 > RELEASE_NOTES.txt
      - run:
          name: Publishing binaries
          command: ./release-scripts/upload-artifacts.sh
      - run:
          name: Handling failed release
          command: ./release-scripts/handle-failed-release.sh
          when: on_fail

workflows:
  version: 2
  test_and_release:
    jobs:
      - build:
          name: Build
          context: nodejs-install

      - regression-test:
          name: Regression Tests
          context: nodejs-install
          requires:
            - Build
          filters:
            branches:
              ignore:
                - master

      - test-windows:
          name: Windows, Node v14.17.5 - Packages, Jest, System Tests
          context: nodejs-install
          requires:
            - Build
          filters:
            branches:
              ignore:
                - master
          jest_tests: true
          system_tests: true
          package_tests: true
      - test-windows:
          name: Windows, Node v14.17.5 - Acceptance Tests
          context: nodejs-install
          requires:
            - Build
          filters:
            branches:
              ignore:
                - master
          acceptance_tests: true
      - test-windows:
          name: Windows, Node v14.17.5 - Root Tap Tests
          context: nodejs-install
          requires:
            - Build
          filters:
            branches:
              ignore:
                - master
          root_tap_tests: true

      - test-linux:
          name: Linux, Node v<< matrix.node_version >> - Packages, Jest, System Tests
          context: nodejs-install
          requires:
            - Build
          filters:
            branches:
              ignore:
                - master
          matrix:
            parameters:
              node_version: ['10.24.1', '12.22.5', '14.17.5', '16.13.0']
          jest_tests: true
          system_tests: true
          package_tests: true
      - test-linux:
          name: Linux, Node v<< matrix.node_version >> - Acceptance Tests
          context: nodejs-install
          requires:
            - Build
          filters:
            branches:
              ignore:
                - master
          matrix:
            parameters:
              node_version: ['10.24.1', '12.22.5', '14.17.5', '16.13.0']
          acceptance_tests: true
      - test-linux:
          name: Linux, Node v<< matrix.node_version >> - Root Tap Tests
          context: nodejs-install
          requires:
            - Build
          filters:
            branches:
              ignore:
                - master
          matrix:
            parameters:
              node_version: ['10.24.1', '12.22.5', '14.17.5', '16.13.0']
          root_tap_tests: true

      - dev-release:
          name: Development Release
          requires:
            - Build
          filters:
            branches:
              ignore:
                - master

      - prod-release:
          name: Production Release
          context: nodejs-app-release
          filters:
            branches:
              only:
                - master
          requires:
            - Build
